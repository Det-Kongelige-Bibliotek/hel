var creator_counter = 0;
var title_counter = 0;
var modal_agent_field;


function updateIndex(index,input) {
    var regex = new RegExp(/[0-9]/);
    // some of the inputs have no id, some have no name!
    var num;
    if (typeof(input.name) !== 'undefined' && input.name.length > 0) {
        num = parseInt(regex.exec(input.name));
    } else {
        if (typeof(input.id !== 'undefined') && input.id.length > 0) {
            num = parseInt(regex.exec(input.id));
        } else {
            if (typeof($(input).attr('data-target')) !== 'undefined') {
                num = parseInt(regex.exec($(input).attr('data-target')))
            }
        }
    }
    if (typeof(num) !== 'undefined') {
        var inc = num + 1;
        if (typeof(input.name) !== 'undefined') {
            var updated_name = input.name.replace(num.toString(), inc.toString());
            $(input).attr('name', updated_name);
        }
        if (typeof(input.id) !== 'undefined') {
            var updated_id = input.id.replace(num.toString(), inc.toString());
            $(input).attr('id', updated_id);
        }
        if (typeof($(input).attr('data-target')) !== 'undefined') {
            var updated_id = $(input).attr('data-target').replace(num.toString(), inc.toString());
            $(input).attr('data-target', updated_id)
        }
        if (typeof($(input).attr('data-condition')) !== 'undefined') {
            var updated_id = $(input).attr('data-condition').replace('_'+num.toString()+'_','_'+inc.toString()+'_');
            $(input).attr('data-condition', updated_id)
        }
        $(input).val('');
    }
}

//If no content file is uploaded a confirm dialog appears
function check_upload_file(){
    var file = $('#upload_file').val();
    console.log('my function: '+file);
    if (file == null || file == ''){
        var r = confirm('Er du sikker? Du har ikke uploadet en fil!');
        if (r == true) return true;
        if (r == false) return false;
    }
    return true;
}

$(document).ready(function(){

    $("img").unveil();

    $(document).ajaxSend(function(event, request, settings) {
        $('#new_authority_person :input').prop('disabled', true);
        $('#loading-indicator').show();
    });

    $(document).ajaxComplete(function(event, request, settings) {
        $('#new_authority_person :input').prop('disabled', false);
        $('#loading-indicator').hide();
    });

    // Inform users that there are unsaved data in the form
    $('form').areYouSure( {'message':'Er du sikker? Du har ikke gemt din formular!'} );

    evaluateEmbargoFields();
    attachInstanceBindings();
    $('#new_work').on('ajax:success', function(event, xhr, settings){
       // append button after form
        $(this).after(xhr);
        restyleButton();
        activateLoaderListener();
    });

    $('.selectpicker').selectpicker();

    $('[data-hook="work-input-form"]').on('ajax:success', restyleButton);
    // Add/remove title functions
    $(".hidden-title").hide();
    // TODO: this stuff needs to be cleaned up
    // e.g. refactor into functions, remove unused code (some of the combobox stuff)
    title_counter = $(".title, .new-title, .hidden-title").length;
    // when user clicks on new title or new author button, clone fields, empty values
    // rename them and paste into form
    $('[data-function="clone-fields"]').click(function(e){
        e.preventDefault();
        var selector = $(this).attr('data-selector'); // cloning messes up the data() method
        var $fields = $(selector);
        disableAuthorityTypeahead($fields)
        var $new_fields = $fields.clone(true);
        $new_fields.show();
        // Update all name and id attributes before pasting in the clone
        $new_fields.find(':input').each(updateIndex);
        $new_fields.find('a[data-target]').each(updateIndex);
        $($new_fields).each(updateIndex);
        // combobox specific stuff - because combobox fucks up the DOM, we need to remake the pre-combobox DOM
        // with the correct ids and names and everything
        var hidden_input_name = $new_fields.find('.combobox-container').children('input:first').attr('name');
        var $combobox = $new_fields.find('select.combobox');
        var combobox_id = $combobox.attr('id');
        $combobox.attr('name', hidden_input_name);
        $new_fields.find('.combobox-container').remove();
        $combobox.show();
        //now - stick them into the DOM!
        $new_fields.insertAfter($fields);
        //TODO: This doesn't work for some reason fix it
        $('#' + combobox_id).combobox();

        enableAuthorityTypeahead($fields);
        enableAuthorityTypeahead($new_fields);
    });
    $('[data-function="delete-fields"]').click(function(e){
        e.preventDefault()
        var selector = $(this).attr('data-target'); //cloning messes up the data() method
        var condition = $(this).attr('data-condition');
        if (eval(condition)) {
            $(selector).hide();
            $(selector).find("input[id$='_destroy']").val('1');
        } else {
            alert("kunne ikke slettes")
        }
    });

    // Add/remove creator functions
    $(".hidden-creator").hide();
    creator_counter = $(".creator, .new-creator, .hidden-creator").length;
    $('[data-function="new-creator"]').click(function(){
        hidden_creator = $("div.hidden-creator");
        new_creator = hidden_creator.clone(true)
            .find("select.creator-id").attr("name","work[creators]["+creator_counter+"][id]").end()
            .find("select.creator-type").attr("name","work[creators]["+creator_counter+"][type]").end();
        hidden_creator.removeClass('hidden-creator').addClass("creator");
        hidden_creator.show();
        new_creator.insertAfter(hidden_creator);
        creator_counter = creator_counter +1;
        return false;
    });
    $('[data-function="delete-creator"]').click(function(){
        $(this).parent().parent().remove();
        return false;
    })
    $('[data-function="clone-input"]').click(function(){
        $input = $(this).prev('input');
        $input.clone().insertAfter($input);
    })

    // Add/remove title functions
    $(".hidden-subject").hide();
    // TODO: this stuff needs to be cleaned up
    // e.g. refactor into functions, remove unused code (some of the combobox stuff)
    subject_counter = $(".subject, .new-subject, .hidden-subject").length;
    $('[data-function="new-subject"]').click(function(){
        hidden_subject = $("div.hidden-subject");
        new_subject = hidden_subject.clone(true)
                .find("select.subject-id").attr("name","work[subjects]["+subject_counter+"][id]").end();
        hidden_subject.removeClass('hidden-subject').addClass("subject");
        hidden_subject.show();
        new_subject.insertAfter(hidden_subject);
        subject_counter = subject_counter + 1;
        return false;
    });
    $('[data-function="delete-subject"]').click(function(){
        $(this).parent().parent().remove();
        return false;
    });



    // Combobox functionallity
    $('.combobox').combobox();
    $('.combobox').click(function(){
        $(this).siblings('.dropdown-toggle').click();
    });

    $("#imageFoundBtn").on('click',renderImageFoundModal);

    $(".upload-file-form").on('submit',function(event){ButtonClicked();return true});

    enableAuthorityTypeahead($(":root"));

    //When submitting the form the check_upload_file function is called to check if a content file is uploaded
   $("#new_instance").on('submit',function(event){
      return check_upload_file();
   });

    $("#new_auth_modal").on("hidden.bs.modal", function () {
        $(this).removeData("bs.modal");
        $(this).find(".modal-body").html("");
       $(this).find("#new-auth-save").show();

    });

    $('[data-function="open-new-auth-modal"]').on('click',function(event){
        event.preventDefault();
        openNewAuthModal('/authority/'+$(this).attr('data-model')+'/new?modal=true');
    });

    $("#new_auth_modal").find('.modal-button').on('click',function() {
        modalSaveForm($("#new_auth_modal").find('form:first'), $("#new_auth_modal").find('.modal-body:first'),$("#new_auth_modal").find('.modal-footer:first'));
    });
});

// when the form-loader retrieves a form, append it to
function activateLoaderListener(){
    function closeLoader() {
        $('[data-hook="dropdown-button"]').dropdown('toggle');
        $('[data-role="form-loader"]')
                .attr('href', '#')
                .attr('data-remote', 'false')
                .unbind();
    }

    function appendResponse(xhr) {
        $('[data-hook="work-form"]').after(xhr);
    }

    $('[data-role="form-loader"]').on('ajax:success', function(event, xhr, settings){
        closeLoader();
        appendResponse(xhr);
        evaluateEmbargoFields();
        attachInstanceBindings();
    });
}

function attachInstanceBindings(){
    $('[data-toggle="embargo_detailed"]').click(evaluateEmbargoFields);
    $('[data-function="fetch_activity_data"]').change(fetchActivityData);
}


// call the Activity show.json
// and populate the form fields with its values
function fetchActivityData(){
    var activity_id = encodeURIComponent($(this).val());
    if (activity_id.length == 0) throw 'ActivityID undefined!';
    var activity_url = "<%= Rails.application.routes.url_helpers.administration_activities_path %>/" + activity_id + '.json';
    $.get(activity_url, function(data) {
        // iterate over response and apply values to the corresponding inputs
        $.each(data, function(i, item){
            if (i == 'activity') return;
            if (item == null) return;
            if (item == 'Undefined') return;
            console.log(i + '-' + item);
            var selector
            if (i == 'availability') {
                // handle availability seperately, as the general method does not work for radiobuttons
                selector = "[name$=\"" + i + "]\"][value=\""+ item +"\"]";
                $(selector).prop('checked',true);
                selector = "[name$=\"" + i + "]\"][value!=\""+ item +"\"]";
                $(selector).prop('checked',false);
            } else {
                if (i == 'collection') {
                    selector = "[name$=\"" + i + "][]\"]";

                } else {
                    selector = "[name$=\"" + i + "]\"]";
                }
                $(selector).val(item);
                $('.selectpicker').selectpicker('refresh');
            }
        });
        //make sure all checkboxes appearances match their values
        var $checkboxes = $('input[type="checkbox"]');
        $checkboxes.each(function(){
            var checked = ($(this).val() == '1');
            $(this).prop('checked', checked);
        });
        //make sure fields are enabled if relevant
        evaluateEmbargoFields();
    });

}

//enable the detailed embargo fields if there is an embargo
function evaluateEmbargoFields() {
    var $checkbox = $('[data-toggle="embargo_detailed"]');
    var $detailed = $('[data-hook="embargo_detailed"]');
    if ($checkbox.is(':checked')) {
        $detailed.attr('disabled', false);
    } else {
        $detailed.attr('disabled', true);
    }
}

// turn the button green to give the user some feedback
function restyleButton() {
    $('[data-hook="work-submit-button"]')
            .removeClass('btn-primary')
            .addClass('btn-success')
            .val('Gemt');
}

function ButtonClicked()
{
    document.getElementById("submit-button").style.display = "none"; // to undisplay
    document.getElementById("button-loading").style.display = ""; // to display
    return true;
}
function renderImageFoundModal(event) {

    var modal =  $("#imageFoundModal");
    var url = $(this).attr("href");
    link = $(this);
    link.html('<span class="glyphicon glyphicon-refresh spinning"></span> Vent ...');

    $.ajax({
        type: 'GET',
        url: url,
        dataType: 'json',
        success: function (data) {
            var errors = data["errors"];
            msg = errors.length + " fejl";

            html = '<p>'+msg+'</p><ul>';
            for (i in errors) {
                html += '<li><pre>'+errors[i]+'</pre></li>';
            }
            html += '</ul>';
            modal_body = modal.find(".modal-body");
            modal_body.html(html);
            modal.modal();
            if (errors.length == 0) {
                link.removeClass('btn-primary').addClass('btn-success');
                link.html("Alle TIFF-filer fundet");
            } else {
                link.removeClass('btn-primary').addClass('btn-danger');
                link.html("Søg efter TIFF filer "+errors.length+" fejl");
            }



        }
    });
    link.attr('data-toggle','modal');
    link.off('click',renderImageFoundModal);
    return false;
}

function ButtonClicked() {
    document.getElementById("submit-button").style.display = "none"; // to undisplay
    document.getElementById("button-loading").style.display = ""; // to display
    return true;
}


// Authority Typeahead functionallity
function enableAuthorityTypeahead(obj) {
    obj.find('[data-function="authority-typeahead"]').each(function(){
        $(this).authority_typeahead({model: $(this).attr('data-model')});
    });
}

function disableAuthorityTypeahead(obj) {
    obj.find('[data-function="authority-typeahead"]').authority_typeahead({remove: true});
}


// modal functionallity
function modalSaveForm(form,body,footer) {
    $.ajax({
        type: $(form).attr('method'),
        url: $(form).attr('action')+'.json',
        data: $(form).serialize(),
        dataType: 'json',
        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
        success: function(data) {
            $(body).html('<p> Person '+data.name+' oprettet.</p>');
            $(footer).find("#new-auth-save").hide();
        },
        error: function(XMLHttpRequest, textStatus, errorThrown) {
            alert("Status: " + textStatus);
            alert("Error: " + errorThrown);
        }
    });

}

function openNewAuthModal(href) {
  $('#new_auth_modal .modal-body').load(href, function (e) {

    $('[data-function="clone-input"]').click(function () {
      $input = $(this).prev('input');
      $input.clone().insertAfter($input);
    });

    viaf_autocomplete();
    $('#new_auth_modal').modal('show');
  })
};
