<% remote ||= false %>


<script>
    $(function () {

//        var agents = new Bloodhound({
//            datumTokenizer: Bloodhound.tokenizers.whitespace,
//            queryTokenizer: Bloodhound.tokenizers.whitespace,
//            remote: {
//                url: 'http://localhost:3000/solrwrapper/%QUERY',
//                wildcard: '%QUERY'
//            }
//
//        });
//
//        $.ajax({
//            url: "http://viaf.org/viaf/AutoSuggest?query=mch",
//
//            // The name of the callback parameter, as specified by the YQL service
//            jsonp: "callback",
//            // Tell jQuery we're expecting JSONP
//            dataType: "jsonp",
//            // Tell YQL what we want and that we want JSON
//            data: {
//                //q: "where query=\"mch\"",
//                format: "json"
//            },
//            // Work with the response
//            success: function( response ) {
//                console.log( response.result ); // server response
//
//            }
//        });

        var showResults = function (data) {
            console.log(JSON.stringify(data));
         /*   var arr = $.map(data, function (item) {
                return {
                    term: item.term
                };
            }); */
            //console.log(JSON.stringify(arr));
            return data.result;
        };


        var agents = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.whitespace,
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            remote: {
                url: 'http://viaf.org/viaf/AutoSuggest?query=%QUERY&callback=?',
                wildcard: '%QUERY',
                ajax: {
                    jsonp: 'callback',
                    type: 'GET',
                    dataType: 'jsonp'
                },
                filter: showResults
            }

        });

        console.log( agents );
        agents.initialize();

        $(".agent-typeahead").typeahead({
            minLength: 1,
            highlight: true },
        {
            name: 'Agents',
            source: agents,
            displayKey: 'term',
            templates: {
                empty: '<div class="empty-message">We should do somthing with empty results</div>'
            }
        }).bind('typeahead:select', function(event, suggestion) {
            $(event.target).parent().parent().parent().find("input[id$='agent_id']").val(suggestion.id);
        });

    });
</script>


<%= builder.simple_fields_for :relators, defaults: { wrapper_html: { class: 'form-group' },
                                                       input_html: { class: 'form-control' }
                                         } do |rel_fields| %>
    <div class="row relator_fields">
      <div class="col-sm-12">
        <div class="input string optional work_relators_agent_name col-sm-6">
          <label class="string optional" for="work_relators_attributes_0_agent_label">Agent Navn</label>
          <input class="string optional form-control agent-typeahead" name="work[blah][]" id="work_relators_attributes_0_agent_label" type="text">
        </div>
        <%= rel_fields.hidden_field :agent_id, wrapper_html: { class: 'col-sm-6' } %>
        <%= rel_fields.input :role, collection: get_list_with_labels('Relators'), input_html: { class: 'combobox'}, wrapper_html: { class: 'col-sm-2' }  %>
      </div>
    </div>
<% end %>