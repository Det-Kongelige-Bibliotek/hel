require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Administration::ControlledListsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Administration::ControlledList. As you add validations to Administration::ControlledList, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { name: 'Language codes', elements: [ { name: 'entry1' }, { name: 'entry2' }] } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Administration::ControlledListsController. Be sure to keep this updated too.
  let(:valid_session) { {}}

  before :each do
    Administration::ControlledList.delete_all
    @user = double('user', groups: ['admin'])
    request.env['warden'].stub :authenticate! => @user
    allow(controller).to receive(:current_user) { @user }
  end

  describe 'GET index' do
    it 'assigns all instances as @instances' do
      instance = Administration::ControlledList.create(valid_attributes)
      get :index, {}, valid_session
      assigns(:controlled_lists).should include instance
    end
  end

  describe 'GET show' do
    it 'assigns the requested controlled list as @controlled_list' do
      controlled_list = Administration::ControlledList.create(valid_attributes)
      get :show, { id: controlled_list.to_param }, valid_session
      assigns(:controlled_list).should eq(controlled_list)
    end
  end

  describe 'GET new' do
    it 'assigns a new instance as @controlled_list' do
      get :new, {}, valid_session
      expect(assigns(:controlled_list)).not_to be_persisted
    end
  end

  describe 'GET edit' do
    it 'assigns the requested controlled_list as @controlled_list' do
      controlled_list = Administration::ControlledList.create(valid_attributes)
      get :edit, { id: controlled_list.id }, valid_session
      assigns(:controlled_list).should eq(controlled_list)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Administration::ControlledList' do
        expect {
          post :create, { administration_controlled_list: valid_attributes }, valid_session
        }.to change(Administration::ControlledList, :count).by(1)
      end

      it 'assigns a newly created instance as @controlled_list' do
        post :create, { administration_controlled_list: valid_attributes }, valid_session
        expect(assigns(:controlled_list)).to be_a(Administration::ControlledList)
        expect(assigns(:controlled_list)).to be_persisted
      end

      it 'creates elements for the controlled list' do
        post :create, { administration_controlled_list: valid_attributes }, valid_session
        expect(assigns(:controlled_list).elements.size).to be > 0
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved instance as @controlled_list' do
        # Trigger the behavior that occurs when invalid params are submitted
        Administration::ControlledList.any_instance.stub(:save).and_return(false)
        post :create, { administration_controlled_list: { name: ''} }, valid_session
        expect(assigns(:controlled_list)).not_to be_persisted
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Administration::ControlledList.any_instance.stub(:save).and_return(false)
        post :create, { administration_controlled_list: { name: ''} }, valid_session
        response.should render_template('new')
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      it 'updates the requested instance' do
        controlled_list = Administration::ControlledList.create(valid_attributes)
        # Assuming there are no other instances in the database, this
        # specifies that the Administration::ControlledList created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Administration::ControlledList.any_instance.should_receive(:update).with('name' => 'galoshes!')
        put :update, { id: controlled_list.id, administration_controlled_list: { 'name' => 'galoshes!' } }, valid_session
      end

      it 'assigns the requested instance as @controlled_list' do
        instance = Administration::ControlledList.create(valid_attributes)
        put :update, { id: instance.to_param, administration_controlled_list: valid_attributes }, valid_session
        assigns(:controlled_list).should eq(instance)
      end

      it 'redirects to the instance' do
        instance = Administration::ControlledList.create(valid_attributes)
        put :update, { id: instance.to_param, administration_controlled_list: valid_attributes }, valid_session
        response.should redirect_to(instance)
      end
    end

    describe 'with invalid params' do
      it 'assigns the instance as @controlled_list' do
        controlled_list = Administration::ControlledList.create(valid_attributes)
        # Trigger the behavior that occurs when invalid params are submitted
        Administration::ControlledList.any_instance.stub(:save).and_return(false)
        put :update, { id: controlled_list.to_param, administration_controlled_list: { something: 'stupid' } }, valid_session
        assigns(:controlled_list).should eq(controlled_list)
      end

      it "re-renders the 'edit' template" do
        controlled_list = Administration::ControlledList.create(valid_attributes)
        # Trigger the behavior that occurs when invalid params are submitted
        Administration::ControlledList.any_instance.stub(:save).and_return(false)
        put :update, { id: controlled_list.to_param, administration_controlled_list: { something: 'stupid' } }, valid_session
        response.should render_template('edit')
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested instance' do
      instance = Administration::ControlledList.create(valid_attributes)
      expect {
        delete :destroy, { id: instance.to_param }, valid_session
      }.to change(Administration::ControlledList, :count).by(-1)
    end

    it 'redirects to the instances list' do
      instance = Administration::ControlledList.create(valid_attributes)
      delete :destroy, { id: instance.to_param }, valid_session
      response.should redirect_to(administration_controlled_lists_url)
    end
  end
end
