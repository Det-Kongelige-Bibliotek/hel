require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

# We'll put our functioning tests here for now
describe WorksController, type: :controller do
  include_context 'shared'
  # This should return the minimal set of attributes required to create a valid
  # Work. As you add validations to Work, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    agent = Authority::Person.create(
        'authorized_personal_name' => { 'given'=> 'Fornavn', 'family' => 'Efternavn', 'scheme' => 'KB', 'date' => '1932/2009' }
    )
    $valid_attributes = {"titles_attributes"=>{"0"=>{"value"=>"test titel"}},
                        "relators_attributes"=>{"0"=>{"agent_id"=>agent.id, "_destroy"=>"",
                                                      "role"=>"http://id.loc.gov/vocabulary/relators/aut"}},
                        "origin_date"=>"unknown/unknown"
    }
  end

  let(:other_valid_attributes) do
    agent2 = Authority::Person.create(
        authorized_personal_name: { given: 'Fornavn2', family: 'Efternavn2', scheme: 'KB' }
    )
    $valid_attributes = {"titles_attributes"=>{"0"=>{"value"=>"test titel 2"}},
                         "relators_attributes"=>{"0"=>{"agent_id"=>agent2.id, "_destroy"=>"",
                                                       "role"=>"http://id.loc.gov/vocabulary/relators/aut"}},
                         "origin_date"=>"1920/1980"
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # InstancesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before :each  do
  #   Work.delete_all
  #   Authority::Base.delete_all
    User.delete_all
    login_admin
  end

  describe '#show' do
    it 'should return rdf when requested' do
      pending "rdf is not delivered for now"
      work = Work.create(work_params)
      work.add_author(person)
      get :show, { id: work.id, format: :rdf }
      expect(assigns(:work)).to eq(work)
    end
  end

  describe 'GET index' do
    it 'assigns all works as @works' do
      work = Work.create(work_params)
      work.add_author(person)
      get :index, {}, valid_session
      assigns(:works).should include(work)
    end
  end

  describe 'GET show' do
    it 'assigns the requested work as @work' do
      work = Work.create(work_params)
      work.add_author(person)
      get :show, { id: work.to_param }, valid_session
      expect(assigns(:work)).to eq(work)
    end
  end

  describe 'GET new' do
    it 'assigns a new work as @work' do
      get :new, {}, valid_session
      assigns(:work).should be_a_new(Work)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested work as @work' do
      work = Work.create(work_params)
      work.add_author(person)
      get :edit, { id: work.to_param }, valid_session
      assigns(:work).should eq(work)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Work' do
        expect {
          post :create, { work: valid_attributes }, valid_session
        }.to change(Work, :count).by(1)
      end

      it 'assigns a newly created work as @work' do
        post :create, { work: valid_attributes}, valid_session
        assigns(:work).should be_a(Work)
        assigns(:work).should be_persisted
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved work as @work' do
        # Trigger the behavior that occurs when invalid params are submitted
        Work.any_instance.stub(:save).and_return(false)
        post :create, { work: {} }, valid_session
        assigns(:work).should be_a_new(Work)
      end

      it 're-renders the new template' do
        # Trigger the behavior that occurs when invalid params are submitted
        Work.any_instance.stub(:save).and_return(false)
        post :create, { work: {} }, valid_session
        response.should render_template('new')
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      it 'updates the requested work' do
        work = Work.create(valid_attributes)
        work.add_author(person)
        # Assuming there are no other works in the database, this
        # specifies that the Work created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Work.any_instance.should_receive(:update).with(other_valid_attributes)
        put :update, { id: work.to_param, work: other_valid_attributes }, valid_session
      end

      it 'assigns the requested work as @work' do
        work = Work.create(valid_attributes)
        work.add_author(person)
        put :update, { id: work.to_param, work: valid_attributes }, valid_session
        assigns(:work).should eq(work)
      end

      it 'redirects to the work' do
        work = Work.create(valid_attributes)
        work.add_author(person)
        put :update, { id: work.to_param, work: valid_attributes }, valid_session
        response.should redirect_to(work)
      end
    end

    describe 'with invalid params' do
      it 'assigns the work as @work' do
        work = Work.create(valid_attributes)
        work.add_author(person)
        # Trigger the behavior that occurs when invalid params are submitted
        Work.any_instance.stub(:save).and_return(false)
        put :update, { id: work.to_param, work: {} }, valid_session
        assigns(:work).should eq(work)
      end

      it 're-renders the edit template' do
        work = Work.create(valid_attributes)
        work.add_author(person)
        # Trigger the behavior that occurs when invalid params are submitted
        Work.any_instance.stub(:save).and_return(false)
        put :update, { id: work.to_param, work: {} }, valid_session
        response.should render_template('edit')
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested work' do
      work = Work.create(valid_attributes)
      work.add_author(person)
      expect {
        delete :destroy, { id: work.to_param }, valid_session
      }.to change(Work, :count).by(-1)
    end

    it 'redirects to the works list' do
      work = Work.create(valid_attributes)
      work.add_author(person)
      delete :destroy, { id: work.to_param }, valid_session
      response.should redirect_to(works_url)
    end
  end

end
